= Introduction =

Ria.js asks developers to use one source file for one entity. This makes it easier to track dependencies at runtime and link them together at runtime.

= Details =

Ria.js dependency system works around entities and files.

{{{
REQUIRE('empx.domx.MyAnnotation');
REQUIRE('empx.domx.MyIfc');
REQUIRE('empx.mvcx.BaseController');

NS('my.ns', function () {
  var map = ASSET('~/content/images/map.png');
  var xml = ASSET('~/content/18n/test.xml');
  var data = ASSET('./empx/domx/data.json');
});
}}}

All this files are fetched asynchronyous and only when all is ready NS callback will be called.

`REQUIRE()` loads entities mapping entity name to file path, eg empx.domx.MyAnnotation is mapped empx/domx/MyAnnotation.js, after module is loaded and ready then it's checked if empx.domx.MyAnnotation is defined. If so dependency is considered resolved. If all dependencies are resolved module is considered loaded and NS callbacks are called. If all callbacks execute successfully then module is considered ready.

`ASSET()` works similar to REQUIRE, but it only loads external files. If file is loaded then dependency is resolved. NS searches for ASSET calls in it's callback and adds it's arguments to dependency list. Inside callback ASSET returns fetched content.

At compile time content can be either embeded to compilation output or fetched at runtime

Dependency system suports custom content loaders/compilers