= Introduction =

Ria.js asks developers to use one source file for one entity. This makes it easier to track dependencies at runtime and link them together at runtime.

= Details =

Ria.js dependency system works around entities and files.

{{{
INCLUDE('~/scripts/jquery.min.js'); // relative to app root
INCLUDE('libs/date.js'); // relative to app code root

REQUIRE('empx.domx.MyAnnotation');
REQUIRE('empx.domx.MyIfc');
REQUIRE('empx.mvcx.BaseController');

NS('my.ns', function () {
  var map = ASSET('~/content/images/map.png');
  var xml = ASSET('~/content/18n/test.xml');
  var data = ASSET('./empx/domx/data.json');
});
}}}

All this files are fetched asynchronyous and only when all is ready NS callback will be called.

`REQUIRE()` loads entities mapping entity name to file path, eg empx.domx.MyAnnotation is mapped empx/domx/MyAnnotation.js, after module is loaded and ready then it's checked if empx.domx.MyAnnotation is defined. If so dependency is considered resolved. If all dependencies are resolved module is considered loaded and NS callbacks are called. If all callbacks execute successfully then module is considered ready.

`ASSET()` works similar to REQUIRE, but it only loads external files. If file is loaded then dependency is resolved. NS searches for ASSET calls in it's callback and adds it's arguments to dependency list. Inside callback ASSET returns fetched content.

`INCLUDE()` works like REQUIRE() but it just loads JS code files. This files are added to resulting build without compilation.

At compile time content can be either embeded to compilation output or fetched at runtime

Dependency system suports custom content loaders/compilers


= Implementation Details =

== Load stages ==

 * PreResolve
 * Mapping
 * Loading
 * PreProcess
 * Process
 * PostProcess
 * CollectDeps
 * CollectCallbacks
 * DepsResolved
 * PostResolve

=== Code Entity flow ===

 * PreResolve: x
 * Mapping: transform entity name to path (maybe using server side path resolver)
 * Loading: load code using script tag
 * PreProcess: x
 * Process: execute code via script tag
 * PostProcess: x
 * CollectDeps: collect calls to REQUIRE
 * CollectCallbacks: collect calls to ASSET in callbacks
 * DepsResolved: x
 * PostResolve: check is entity is loaded


=== Haml asset flow ===
 * PreResolve
 * Mapping: resolve asset URL
 * Loading: load haml using AJAX
 * PreProcess: x
 * Process: compile haml to js
 * PostProcess: x
 * CollectDeps: add runtime to deps
 * CollectCallbacks: add callback that executes compiled js via script tag
 * DepsResolved: x
 * PostResolve: check is asset is loaded

=== Image asset flow ==
 * PreResolve
 * Mapping: resolve asset URL
 * Loading: load image using Image()
 * PreProcess: x
 * Process: x
 * PostProcess: x
 * CollectDeps: x
 * CollectCallbacks: add callback that assigns asset to identifier
 * DepsResolved: x
 * PostResolve: check asset is loaded

=== i18n asset flow ===
 * PreResolve: x
 * Mapping: resolve asset URL
 * Loading: load using AJAX
 * PreProcess: x
 * Process: parse JSON
 * PostProcess: x
 * CollectDeps: x
 * CollectCallbacks: add callback that assigns to identifier
 * DepsResolved: x
 * PostResolve: check if asset is loaded