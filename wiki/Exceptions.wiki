= Introduction =

TODO add introduction to Exceptions concept


= Declaration =

{{{
EXCEPTION(
  'MyException', EXTENDS(MyBaseException), [
    function $(msg, e_) {
      BASE(msg, e_);
    }
  ]);
}}}

= Usage =

{{{
var e = new MyException('Trouble is here');
var e2 = new MyException('Trouble is in inner', e);
throw e2;
}}}

= Low Level API=

{{{
window.Exception = function () {
  function Exception(msg, inner_) {
    ria.__API.init(this, MyException, MyException.prototype.$, arguments);
  };
 
  Exception.prototype.$ = function (msg, inner_) {
    //#ifdef DEBUG
      ria.__API.checkArg('msg', String, msg);
      ria.__API.checkArg('inner_'], [Error, Exception], inner_ || null);
    //#endif
    this.msg = Error(msg);
    this.inner_ = inner_;
  };

  Exception.prototype.toString = function () {
    var msg = this.msg.stack ? this.msg.stack : this.msg.toString();

    if (this.inner_) {
      msg += '\nCaused by: ';
      if (this.inner_ instanceof Error && this.inner_.stack) {
        msg += this.inner_.stack;
      } else {
        msg += this.inner_.toString();
      }
    }
    
    return msg;
  };
}();

window.MyException = function () {
  function MyException(msg, e_) {
    ria.__API.init(this, MyException, MyException.prototype.$, arguments);
  }

  MyException.prototype.$ = function (msg, e_) {
    MyBaseException.prototype.$.call(this, msg, e_);
  };  

  return MyException;
}();
}}}