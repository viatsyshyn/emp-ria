#summary Generics Proposal
#labels Featured

= Introduction =

From Wikipedia, the free encyclopedia:
   
   Generics are a facility of generic programming that was added to the Java programming language in 2004 as part of J2SE 5.0. They allow "a type or method to operate on objects of various types while providing compile-time type safety." A common use of this feature is when using a Java Collection that can hold objects of any type, to specify the specific type of object stored in it.


= Details =

Generic class 

{{{

DELEGATE(
  GENERIC('T'),
  [[T, T]],
  Boolean, function Comparator(_1, _2) {});

// Map<TKey, TValue>
CLASS(
  GENERIC('TKey', 'TValue'),
  'MyBaseMap', [
     [[T, T]],
     ABSTRACT, T, function add(t1, t2) {}
  ]);

INTERFACE(
  GENERIC('T', EXTENDS(MyBase)), // may interfaces be GENERIC ?
  'MyIfc', [
     T, 'param' // not a property, but a shortcut ?
  ]);

// Dictionary<T>
CLASS(
  GENERIC('T'),
  'MyDictionary', 
      EXTENDS(MyBase.OF(String, T)),
      IMPLEMENTS(MyIfc.OF(T)), [ 

    T, 'param',

    [[T]],
    function $(param) {},

    [[T, T]],
    T, function add(_1, _2) { return _1 + _2; },

    READONLY, Comparator.OF(T), 'comparator'
  ]);
}}}

Instantiation

{{{
// first one arg is generalization of generic MyGenericClass<T>
var instance = MyDictionary(Number, 1); // specified with Number
}}}

Generics typing is check only in DEBUG mode. Generics typing is available via reflection

=== Impelementation notes ===

All classes are generics with zero or more params. Generalizations has readonly protected fields. If base class has generalization, children can use same name (reuse) it as its own generalization. Generalizations fields are protected as well. But public are only getters of unspecified generalizations of class.

{{{
CLASS(
  GENERIC('TKey', 'TValue'),
  'Dictionary', [
    READONLY, List.OF(TKey), 'keys',
    READONLY, List.OF(TValue), 'values',

    [[TKey, TValue]], 
    VOID, function add(key, value) {}
  ]);

var base = new Dictionary(String, Boolean);
child.getSpecsOf('TKey') === String;
child.getSpecsOf('TValue') === Boolean;

CLASS(
  GENERIC('TValue'),
  'StringDictionary', EXTENDS(Dictionary.OF(String, TValue), [
    [[Object]],
    function $fromObject(hash) {
      for(var k in hash) if (has.hasOwnProperty(k))
        this.add(k, hash[k]);
    }
  ]);

var child = new StringDictionary.$fromObject(Number, {}); 

child.getSpecsOf('TKey') === undefined;
child.getSpecsOf('TValue') === String;

child.add(5, '') // <-- triggers error 5 is not String
}}}

{{{
var instance = new Dictinary(String, Number);
instance.__PROTECTED.__SPECS.TKey === String;
instance.__PROTECTED.__SPECS.TValue === Number;

Dictinary.OF = function OF(TKey, TValue) {
  var specs = ria.__API.clone(arguments),
      clazz = this; // this is Dictionary
  VALIDATE_ARGS(clazz.__META.specNames, clazz.__META.specTypes, specs);
  return ria.__API.specify(clazz, specs)
}.bind(Dictinary);

Dictionary = function () {
  function Dictionary() {
    var args = ria.__API.clone(arguments),
        specsCount = Dictionary.__META.specsNames.length,
        specs = args.slice(0, specsCount);
    args = args.slice(specsCount);

    var factory = Dictionary.$$ || ria.__API.init;
    return factory(this, Dictionary, Dictionary.prototype.$, args, specs); 
  }

  Dictionary.$fromObject = function () {
    var args = ria.__API.clone(arguments),
        specsCount = Dictionary.__META.specsNames.length,
        specs = args.slice(0, specsCount);

    var factory = Dictionary.$$ || ria.__API.init;
    return factory(this, Dictionary, Dictionary.prototype.$fromObject, args.slice(specsCount), specs); 
  }
}();
}}}