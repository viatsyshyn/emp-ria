#summary Generics Proposal

= Introduction =

From Wikipedia, the free encyclopedia:
   
   Generics are a facility of generic programming that was added to the Java programming language in 2004 as part of J2SE 5.0. They allow "a type or method to operate on objects of various types while providing compile-time type safety."[1] A common use of this feature is when using a Java Collection that can hold objects of any type, to specify the specific type of object stored in it.


= Details =

Generic class 

{{{

DELEGATE(
  GENERIC('T'),
  [T, T],
  Boolean, function Comparator(_1, _2) {});

INTERFACE(
  GENERIC('T'),
  'MyIfc', [
     T, 'param' // not a property, but a shortcut ?
  ]);

CLASS(
  GENERIC('T'),
  'MyGenericClass', 
      EXTENDS(SPECIFY(MyBase, T, Number)), // MyBase<T1,T2> is generic also
      IMPLEMENTS(SPECIFY(MyIfc, T)), [ 

    T, 'param',

    [T],
    function $(param) {},

    [T, T],
    T, function add(_1, _2) { return _1 + _2; },

    READONLY, SPECIFY(Comparator, T), 'comparator'
  ]);
}}}

TODO: required a good syntax for specialization of generics in type hints

Instantiation

{{{
var instance = MyGenericClass(1); // Generalized version, equivalent to specification with Object
var instance2 = SPECIFY(MyGenericClass, Number)(1); // specified with Number
}}}

Generics typing is check only in DEBUG mode. Generics typing is available via reflection