#summary One-sentence summary of this page.

= Introduction =

Classes are the core of EMP Ria. The main goals of EMP Ria classes are easy declaration and powerfull type hinting. Type hints are completely optional, but is very welcome, as in empowers classes a lot. 

= Declaration =

{{{
CLASS(
  // Classes can be annotated
  [MyAnnotation]
  'MyClass', EXTENDS(MyBaseClass), IMPLEMENTS(MyIfc), [
    // contains public properties (ONLY public)
    String, 'value', 

    // contains public ctor
    [String]
    function $(value) {
      BASE();
    },

    VOID, function publicMember() {
    },

    VOID, function protectedMember_() {
    }
  ]);
}}}

Class may be extended from other classes. All classes extend base class called Class implicitly.

Class may implement interfaces. This ensures that all methods declared in interface are implemented in class. Also instance of a class is also implicit instance on interface, so it can pass type hint.

Class may contain properties. Property is complex of protected field and public getter and setter. Property name can be only valid JS variable name. Getter name is constructed by capitalizing field name and prefix 'is' in case of Boolean properties or 'get' otherwise. Setter name is constructed by capitalizing field name and prefix 'set'. 

Class may have explicit constructor (method named '$'). Constructors does not return result and their return type is omitted and defaults to VOID. If constructor returns any thing exception is raised. Constructor body should have call to constructor of base class. If base class has parameterless constructor or all parameters are optional then base constructor is called implicitly before first statement of constructor. It's a good practice to put explicit base constructor call as first statement of constructor declaration. Constructors are always public.

Class may contain public and protected method. Methods are considered protected if method name ends with '_'. Method name can NOT start with '$'. Methods have return and it can be type hinted or VOID or anything (if type hint is omitted). Also method may have arguments. Argument is considered optional if it's name ends with '_'. Variable arguments count is not supported. It's recommended to pass variable arguments as last optional array argument (it also can be type hinted).

All methods of class are considered virtual. This means that any descendant class can override any method. To prevent override methods can be marked with FINAL. To make system more error prune, it is required to mark any explicit methods override with OVERRIDE. If OVERRIDE is omitted warning will be raised. Methods can be marked with ABSTRACT if its override in descendant classes id required. Abstract methods can still have body and is callable from overrides via BASE(). Abstract methods do not make class abstract.

Classes can be marked as ABSTRACT if it's direct instantiation is forbidden or FINAL if it can not be extended. Class can not be marked as ABSTRACT and FINAL at the same time.